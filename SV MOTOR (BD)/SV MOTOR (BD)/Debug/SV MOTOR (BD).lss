
SV MOTOR (BD).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080c  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e8  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 65 00 	call	0xca	; 0xca <main>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <INIT_TIMER>:

char data;

void INIT_TIMER(void)
{
	TCCR1A |= (1 << WGM11);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  9a:	a1 e8       	ldi	r26, 0x81	; 129
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	8c 91       	ld	r24, X
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11);
  a4:	8c 91       	ld	r24, X
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8c 93       	st	X, r24
	ICR1 = 40000;
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	9c e9       	ldi	r25, 0x9C	; 156
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A |= (1<<COM1A1);
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	DDRB |= (1 << PINB1) | (1 << PINB2);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PIND5) | (1 << PIND6);
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	80 66       	ori	r24, 0x60	; 96
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <main>:
}

int main(void)
{
	INIT_TIMER();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <INIT_TIMER>
	
	DDRB = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  d2:	8a b9       	out	0x0a, r24	; 10

	PORTB = 0x00;
  d4:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  d6:	1b b8       	out	0x0b, r1	; 11
	
	while (1)
	{
		UART_INIT();
  d8:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_INIT>

		data = UART_receive();
  dc:	0e 94 c0 00 	call	0x180	; 0x180 <UART_receive>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		switch(data)
  e4:	83 34       	cpi	r24, 0x43	; 67
  e6:	11 f1       	breq	.+68     	; 0x12c <main+0x62>
  e8:	28 f4       	brcc	.+10     	; 0xf4 <main+0x2a>
  ea:	81 34       	cpi	r24, 0x41	; 65
  ec:	49 f0       	breq	.+18     	; 0x100 <main+0x36>
  ee:	82 34       	cpi	r24, 0x42	; 66
  f0:	91 f0       	breq	.+36     	; 0x116 <main+0x4c>
  f2:	f2 cf       	rjmp	.-28     	; 0xd8 <main+0xe>
  f4:	85 34       	cpi	r24, 0x45	; 69
  f6:	49 f1       	breq	.+82     	; 0x14a <main+0x80>
  f8:	20 f1       	brcs	.+72     	; 0x142 <main+0x78>
  fa:	86 34       	cpi	r24, 0x46	; 70
  fc:	51 f1       	breq	.+84     	; 0x152 <main+0x88>
  fe:	ec cf       	rjmp	.-40     	; 0xd8 <main+0xe>
		{
// ¿À¸¥ÂÊ
			case 'A' :
			OCR1A = PULSE_MIN;
 100:	88 e9       	ldi	r24, 0x98	; 152
 102:	98 e0       	ldi	r25, 0x08	; 8
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_MIN;
 10c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 110:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			break;
 114:	e1 cf       	rjmp	.-62     	; 0xd8 <main+0xe>

			case 'B' :
			OCR1A = PULSE_MAX;
 116:	88 ed       	ldi	r24, 0xD8	; 216
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_MAX;
 122:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 126:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			break;
 12a:	d6 cf       	rjmp	.-84     	; 0xd8 <main+0xe>
			
			case 'C' :
			OCR1A = PULSE_MID;
 12c:	88 eb       	ldi	r24, 0xB8	; 184
 12e:	9b e0       	ldi	r25, 0x0B	; 11
 130:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 134:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PULSE_MID;
 138:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 13c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			break;
 140:	cb cf       	rjmp	.-106    	; 0xd8 <main+0xe>
// ¿ÞÂÊ
			case 'D' :
			OCR0A = PULSE_MIN;
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	87 bd       	out	0x27, r24	; 39
			OCR0B = PULSE_MIN;
 146:	88 bd       	out	0x28, r24	; 40
			break;
 148:	c7 cf       	rjmp	.-114    	; 0xd8 <main+0xe>

			case 'E' :
			OCR0A = PULSE_MAX;
 14a:	88 ed       	ldi	r24, 0xD8	; 216
 14c:	87 bd       	out	0x27, r24	; 39
			OCR0B = PULSE_MAX;
 14e:	88 bd       	out	0x28, r24	; 40
			break;
 150:	c3 cf       	rjmp	.-122    	; 0xd8 <main+0xe>
			
			case 'F' :
			OCR0A = PULSE_MID;
 152:	88 eb       	ldi	r24, 0xB8	; 184
 154:	87 bd       	out	0x27, r24	; 39
			OCR0B = PULSE_MID;
 156:	88 bd       	out	0x28, r24	; 40
			break;
 158:	bf cf       	rjmp	.-130    	; 0xd8 <main+0xe>

0000015a <UART_INIT>:
ï»¿#include "UART.h"

void UART_INIT(void)
{
	UCSR0A |= (1 << U2X0);
 15a:	e0 ec       	ldi	r30, 0xC0	; 192
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;
 164:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 16;
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1<<RXEN0);
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 61       	ori	r24, 0x10	; 16
 176:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0);	
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <UART_receive>:
}

unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );
 180:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <UART_receive>
	return UDR0;
 188:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
