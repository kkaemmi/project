
DC MOTOR (BD).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000837  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 91 00 	call	0x122	; 0x122 <main>
  88:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PINMODE>:
	return 0;
}

int PINMODE()
{	
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
	TCCR1B |= (1 << COM1A1) | (1 << COM1B1);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 6a       	ori	r24, 0xA0	; 160
  a2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
		
	DDRB |= (1 << PINB0) | (1 << PINB1) | (1 << PINB2);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PIND5) | (1 << PIND6) | (1 << PIND7) ;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	80 6e       	ori	r24, 0xE0	; 224
  b4:	8a b9       	out	0x0a, r24	; 10
	
	return 0;
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <DCmotor>:

int DCmotor()
{
	PINMODE();
  bc:	0e 94 48 00 	call	0x90	; 0x90 <PINMODE>
	
	DDRB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  c4:	8a b9       	out	0x0a, r24	; 10
		
	PORTB = 0x00;
  c6:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  c8:	1b b8       	out	0x0b, r1	; 11
	
	while(1)
	{
		UART_INIT();
  ca:	0e 94 93 00 	call	0x126	; 0x126 <UART_INIT>
		
		data = UART_receive();
  ce:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_receive>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		switch(data)
  d6:	82 33       	cpi	r24, 0x32	; 50
  d8:	91 f0       	breq	.+36     	; 0xfe <DCmotor+0x42>
  da:	28 f4       	brcc	.+10     	; 0xe6 <DCmotor+0x2a>
  dc:	80 33       	cpi	r24, 0x30	; 48
  de:	e1 f0       	breq	.+56     	; 0x118 <DCmotor+0x5c>
  e0:	81 33       	cpi	r24, 0x31	; 49
  e2:	31 f0       	breq	.+12     	; 0xf0 <DCmotor+0x34>
  e4:	f2 cf       	rjmp	.-28     	; 0xca <DCmotor+0xe>
  e6:	83 33       	cpi	r24, 0x33	; 51
  e8:	89 f0       	breq	.+34     	; 0x10c <DCmotor+0x50>
  ea:	84 33       	cpi	r24, 0x34	; 52
  ec:	91 f0       	breq	.+36     	; 0x112 <DCmotor+0x56>
  ee:	ed cf       	rjmp	.-38     	; 0xca <DCmotor+0xe>
		{
			case '1':
			OCR1A = 0x03;
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			break;
  fc:	e6 cf       	rjmp	.-52     	; 0xca <DCmotor+0xe>
			case '2':
			OCR1B = 0x05;
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 106:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			break;
 10a:	df cf       	rjmp	.-66     	; 0xca <DCmotor+0xe>
			case '3':
			OCR0B = 0x60;
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	88 bd       	out	0x28, r24	; 40
			break;
 110:	dc cf       	rjmp	.-72     	; 0xca <DCmotor+0xe>
			case '4':
			OCR0A = 0xA0;
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	87 bd       	out	0x27, r24	; 39
			break;
 116:	d9 cf       	rjmp	.-78     	; 0xca <DCmotor+0xe>
			case '0':
			OCR2A = 0x00;
 118:	e3 eb       	ldi	r30, 0xB3	; 179
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
			OCR2A = 0x00;
 11e:	10 82       	st	Z, r1
			break;
 120:	d4 cf       	rjmp	.-88     	; 0xca <DCmotor+0xe>

00000122 <main>:

int DCmotor();
int PINMODE();
int main(void)
{
	DCmotor();
 122:	0e 94 5e 00 	call	0xbc	; 0xbc <DCmotor>

00000126 <UART_INIT>:
﻿#include "UART.h"

void UART_INIT(void)
{
	UCSR0A |= (1 << U2X0);   // 2배속 모드
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;           // 통신 속도 설정2
 130:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 16;
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << RXEN0);   // 송수신 가능
 13a:	e1 ec       	ldi	r30, 0xC1	; 193
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 61       	ori	r24, 0x10	; 16
 142:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <UART_receive>:
}

unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1 << RXC0)) );   // 데이터 수신 대기
 14c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 150:	88 23       	and	r24, r24
 152:	e4 f7       	brge	.-8      	; 0x14c <UART_receive>
	return UDR0;
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
