
DC MOTOR (BD).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ed  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c4  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

unsigned char data, receive;

int main(void)
{
	DDRB = 0x00;
  90:	14 b8       	out	0x04, r1	; 4
	DDRD = 0x00;
  92:	1a b8       	out	0x0a, r1	; 10
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  94:	e0 eb       	ldi	r30, 0xB0	; 176
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
  9e:	80 81       	ld	r24, Z
  a0:	80 6a       	ori	r24, 0xA0	; 160
  a2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  a4:	e1 eb       	ldi	r30, 0xB1	; 177
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	80 83       	st	Z, r24
	DDRD |= (1<<PIND3);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PINB3);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  ba:	84 b5       	in	r24, 0x24	; 36
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	80 6a       	ori	r24, 0xA0	; 160
  c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1<<PIND5);
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PIND6);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8a b9       	out	0x0a, r24	; 10

	while (1)
	{

		UART_INIT();
  d8:	0e 94 97 00 	call	0x12e	; 0x12e <UART_INIT>
		
		data = UART_receive();
  dc:	0e 94 aa 00 	call	0x154	; 0x154 <UART_receive>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if(data == '\n') {PORTB = 0x00; PORTD = 0x00;}
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x5c>
  e8:	15 b8       	out	0x05, r1	; 5
  ea:	1b b8       	out	0x0b, r1	; 11
		{
			if (data == 'q')
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	81 37       	cpi	r24, 0x71	; 113
  f2:	21 f4       	brne	.+8      	; 0xfc <main+0x6c>
			{
				OCR2A = 200;
  f4:	88 ec       	ldi	r24, 0xC8	; 200
  f6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  fa:	ee cf       	rjmp	.-36     	; 0xd8 <main+0x48>
			}
			else if (data == 'w')
  fc:	87 37       	cpi	r24, 0x77	; 119
  fe:	21 f4       	brne	.+8      	; 0x108 <main+0x78>
			{
				OCR2B = 200;
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 106:	e8 cf       	rjmp	.-48     	; 0xd8 <main+0x48>
			}
			else if (data == 'e')
 108:	85 36       	cpi	r24, 0x65	; 101
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x82>
			{
				OCR0A = 200;
 10c:	88 ec       	ldi	r24, 0xC8	; 200
 10e:	87 bd       	out	0x27, r24	; 39
 110:	e3 cf       	rjmp	.-58     	; 0xd8 <main+0x48>
			}
			else if (data == 'r')
 112:	82 37       	cpi	r24, 0x72	; 114
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x8c>
			{
				OCR0B = 200;
 116:	88 ec       	ldi	r24, 0xC8	; 200
 118:	88 bd       	out	0x28, r24	; 40
 11a:	de cf       	rjmp	.-68     	; 0xd8 <main+0x48>
			}
			else if (data == 's')
 11c:	83 37       	cpi	r24, 0x73	; 115
 11e:	e1 f6       	brne	.-72     	; 0xd8 <main+0x48>
			{
				OCR2B = 0;
 120:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				OCR2A = 0;
 124:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				OCR0B = 0;
 128:	18 bc       	out	0x28, r1	; 40
				OCR0A = 0;
 12a:	17 bc       	out	0x27, r1	; 39
 12c:	d5 cf       	rjmp	.-86     	; 0xd8 <main+0x48>

0000012e <UART_INIT>:
﻿#include "UART.h"

void UART_INIT(void)
{
	UCSR0A |= (1 << U2X0);   // 2배속 모드
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
	
	UBRR0H = 0x00;           // 통신 속도 설정2
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 16;
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << RXEN0);   // 송수신 가능
 142:	e1 ec       	ldi	r30, 0xC1	; 193
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 14c:	80 81       	ld	r24, Z
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <UART_receive>:
}

unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1 << RXC0)) );   // 데이터 수신 대기
 154:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 158:	88 23       	and	r24, r24
 15a:	e4 f7       	brge	.-8      	; 0x154 <UART_receive>
	return UDR0;
 15c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
