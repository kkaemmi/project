
DC MOTOR (BP).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d0  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024b  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DCMotor>:
	return 0;
}

int DCMotor(void)
{
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10

	PORTB = 0x00;
  96:	15 b8       	out	0x05, r1	; 5
	PORTD = 0xC0;
  98:	80 ec       	ldi	r24, 0xC0	; 192
  9a:	8b b9       	out	0x0b, r24	; 11
	
	while(1)
	{
		PORTB = DC_MOTOR;
  9c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <DC_MOTOR>
  a0:	85 b9       	out	0x05, r24	; 5
		
		if((PIND & 0x40) == 0x00 && state == 0)
  a2:	4e 99       	sbic	0x09, 6	; 9
  a4:	0a c0       	rjmp	.+20     	; 0xba <DCMotor+0x2a>
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	81 11       	cpse	r24, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <DCMotor+0x2a>
		{
			DC_MOTOR = 0x03;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DC_MOTOR>
			state = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if((PIND & 0x40) == 0x00 && state == 1)
  ba:	4e 99       	sbic	0x09, 6	; 9
  bc:	09 c0       	rjmp	.+18     	; 0xd0 <DCMotor+0x40>
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	29 f4       	brne	.+10     	; 0xd0 <DCMotor+0x40>
		{
			DC_MOTOR = 0x05 ;
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DC_MOTOR>
			state = 0;
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if((PIND & 0x80) == 0x00)
  d0:	4f 99       	sbic	0x09, 7	; 9
  d2:	e4 cf       	rjmp	.-56     	; 0x9c <DCMotor+0xc>
		{
			DC_MOTOR = 0x00;
  d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <DC_MOTOR>
  d8:	e1 cf       	rjmp	.-62     	; 0x9c <DCMotor+0xc>

000000da <main>:
char state = 0;

int DCMotor(void);
int main(void)
{
	DCMotor();
  da:	0e 94 48 00 	call	0x90	; 0x90 <DCMotor>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
