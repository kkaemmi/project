
DC MOTOR (BP).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000184  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000257  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DCMotor>:
	return 0;
}

int DCMotor(void)
{
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10

	PORTB = 0x00;
  96:	15 b8       	out	0x05, r1	; 5
	PORTD = 0xE0;
  98:	80 ee       	ldi	r24, 0xE0	; 224
  9a:	8b b9       	out	0x0b, r24	; 11
	
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  9c:	e0 e8       	ldi	r30, 0x80	; 128
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
  a6:	80 81       	ld	r24, Z
  a8:	80 6a       	ori	r24, 0xA0	; 160
  aa:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS21);
  ac:	e1 e8       	ldi	r30, 0x81	; 129
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	
	DDRB |= (1 << PINB0) | (1 << PINB1) | (1 << PINB2);
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	84 b9       	out	0x04, r24	; 4
	
	while(1)
	{
		PORTB = DC_MOTOR;
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	85 b9       	out	0x05, r24	; 5

		if((PIND & 0x80) == 0x00)
  c2:	4f 99       	sbic	0x09, 7	; 9
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <DCMotor+0x48>
		{
			OCR1A = 200;
  c6:	88 ec       	ldi	r24, 0xC8	; 200
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			DC_MOTOR = 0x03;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if((PIND & 0x40) == 0x00)
  d8:	4e 99       	sbic	0x09, 6	; 9
  da:	09 c0       	rjmp	.+18     	; 0xee <DCMotor+0x5e>
		{
			OCR1B = 200;
  dc:	88 ec       	ldi	r24, 0xC8	; 200
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			DC_MOTOR = 0x05;
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if((PIND & 0x20) == 0x00)
  ee:	4d 99       	sbic	0x09, 5	; 9
  f0:	e5 cf       	rjmp	.-54     	; 0xbc <DCMotor+0x2c>
		{
			DC_MOTOR = 0x00;
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			OCR1A = 0;
  f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = 0;
  fe:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 102:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 106:	da cf       	rjmp	.-76     	; 0xbc <DCMotor+0x2c>

00000108 <main>:

int DCMotor(void);

int main(void)
{
	DCMotor();
 108:	0e 94 48 00 	call	0x90	; 0x90 <DCMotor>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
