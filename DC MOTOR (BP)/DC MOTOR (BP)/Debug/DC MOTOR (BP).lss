
DC MOTOR (BP).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d0  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DCMotor>:
	return 0;
}

int DCMotor(void)
{
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  94:	8a b9       	out	0x0a, r24	; 10

	PORTB = 0x00;
  96:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  98:	1b b8       	out	0x0b, r1	; 11
	
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  9a:	e0 eb       	ldi	r30, 0xB0	; 176
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
  a4:	80 81       	ld	r24, Z
  a6:	80 6a       	ori	r24, 0xA0	; 160
  a8:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  aa:	e1 eb       	ldi	r30, 0xB1	; 177
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	80 83       	st	Z, r24
	DDRB |= (1 << PINB3);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PIND3);
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8a b9       	out	0x0a, r24	; 10
	
	while(1)
	{
		PORTB = DC_MOTORB;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	85 b9       	out	0x05, r24	; 5
		PORTD = DC_MOTORD;
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <DC_MOTORD>
  ca:	8b b9       	out	0x0b, r24	; 11

		if((PIND & 0x20) == 0x00)
  cc:	4d 99       	sbic	0x09, 5	; 9
  ce:	06 c0       	rjmp	.+12     	; 0xdc <DCMotor+0x4c>
		{
			OCR2A = 150;
  d0:	86 e9       	ldi	r24, 0x96	; 150
  d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			DC_MOTORB = 0x08;
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if((PIND & 0x40) == 0x00)
  dc:	4e 99       	sbic	0x09, 6	; 9
  de:	06 c0       	rjmp	.+12     	; 0xec <DCMotor+0x5c>
		{
			OCR2B = 150;
  e0:	86 e9       	ldi	r24, 0x96	; 150
  e2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			DC_MOTORD = 0x08;
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DC_MOTORD>
		}
		
		if((PIND & 0x80) == 0x00)
  ec:	4f 99       	sbic	0x09, 7	; 9
  ee:	e8 cf       	rjmp	.-48     	; 0xc0 <DCMotor+0x30>
		{
			DC_MOTORB = 0x00;
  f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			DC_MOTORD = 0x00;
  f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <DC_MOTORD>
			OCR2A = 0;
  f8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			OCR2B = 0;
  fc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 100:	df cf       	rjmp	.-66     	; 0xc0 <DCMotor+0x30>

00000102 <main>:

int DCMotor(void);

int main(void)
{
	DCMotor();
 102:	0e 94 48 00 	call	0x90	; 0x90 <DCMotor>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
